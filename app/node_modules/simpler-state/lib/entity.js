"use strict";

exports.__esModule = true;
exports.default = exports.applyPlugins = exports.entity = void 0;

var _useEntity = require("./useEntity");

var _store = require("./store");

var entity = function entity(initialValue, plugins) {
  if (plugins === void 0) {
    plugins = [];
  }

  if (initialValue === undefined) throw new Error('Entity requires an initial value.');
  if (!(plugins instanceof Array)) throw new Error('Invalid plug-ins array.');
  var newEntity = {
    _value: undefined,
    _subscribers: new Set()
  };
  newEntity._subscribe = createSubscribe(newEntity);

  newEntity.get = function () {
    return newEntity._value;
  };

  newEntity.set = createSetter(newEntity);
  newEntity.init = createInit(newEntity, initialValue);
  newEntity.use = createHook(newEntity);
  applyPlugins(newEntity, plugins);
  newEntity.init(); // Add this entity to store (if enabled) for use with `resetAll`

  if ((0, _store.isStoreEnabled)()) _store.store.add(newEntity);
  return newEntity;
};

exports.entity = entity;

var createSetter = function createSetter(entity) {
  return function (newValue) {
    for (var _len = arguments.length, updaterArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      updaterArgs[_key - 1] = arguments[_key];
    }

    if (typeof newValue === 'function') newValue = newValue.apply(void 0, [entity._value].concat(updaterArgs));
    entity._value = newValue;

    entity._subscribers.forEach(function (cb) {
      return cb(entity._value);
    });
  };
};

var createInit = function createInit(entity, initialValue) {
  return initialValue && typeof initialValue.then === 'function' ? function () {
    // Call the setter so that any bound components are updated
    // The `setTimeout` is for preventing race conditions with subscriptions
    initialValue.then(function (value) {
      return setTimeout(function () {
        return entity.set(value);
      });
    });
  } : function () {
    entity._value = initialValue;
  };
};

var createHook = function createHook(entity) {
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _useEntity.useEntity.apply(void 0, [entity].concat(args));
  };
};

var createSubscribe = function createSubscribe(entity) {
  return function (subscriberFn) {
    entity._subscribers.add(subscriberFn);

    return function () {
      entity._subscribers.delete(subscriberFn);
    };
  };
};

var applyPlugins = function applyPlugins(entity, plugins) {
  plugins.forEach(function (plugin) {
    if (typeof plugin !== 'object') throw new Error('Invalid plug-in');

    var overrideMethod = function overrideMethod(method) {
      if (typeof plugin[method] === 'function') {
        var override = plugin[method](entity[method], entity);
        if (typeof override !== 'function') throw new Error("Invalid override for '" + method + "' in plug-in.");
        entity[method] = override;
      }
    };

    overrideMethod('init');
    overrideMethod('set');
  });
};

exports.applyPlugins = applyPlugins;
var _default = entity;
exports.default = _default;