"use strict";

exports.__esModule = true;
exports.default = exports.persistence = void 0;

var persistence = function persistence(key, options) {
  if (options === void 0) {
    options = {};
  }

  if (typeof key !== 'string') throw new Error('Persistence requires a string key.');
  var storage = options.storage || 'local';
  if (storage === 'local') storage = getLocalStorage();else if (storage === 'session') storage = getSessionStorage();else validateCustomStorage(storage);

  if (!storage) {
    console.warn('Storage unavailable. Persistence disabled.');
    return {};
  }

  return {
    init: function init(origInit, entity) {
      return function () {
        var deserialize = options.deserializeFn || JSON.parse;
        origInit(); // Fetch persisted value (if any) from storage

        getItem(storage, key, deserialize, entity.set);
      };
    },
    set: function set(origSet, entity) {
      return function () {
        var serialize = options.serializeFn || JSON.stringify;
        origSet.apply(void 0, arguments); // Persist the new value to storage

        setItem(storage, key, entity.get(), serialize);
      };
    }
  };
};

exports.persistence = persistence;

var getLocalStorage = function getLocalStorage() {
  try {
    return localStorage;
  } catch (err) {
    return null;
  }
};

var getSessionStorage = function getSessionStorage() {
  try {
    return sessionStorage;
  } catch (err) {
    return null;
  }
};

var validateCustomStorage = function validateCustomStorage(storage) {
  if (typeof storage.getItem !== 'function' || typeof storage.setItem !== 'function') throw new Error('Persistence: Invalid storage.');
};

var getItem = function getItem(storage, key, deserialize, callback) {
  var res = storage.getItem(key);
  if (res == null) return;
  if (typeof res.then === 'function') res.then(function (val) {
    if (val != null) processValue(deserialize, val, callback);
  });else processValue(deserialize, res, callback);
};

var setItem = function setItem(storage, key, value, serialize) {
  processValue(serialize, value, function (res) {
    return storage.setItem(key, res);
  });
};

var processValue = function processValue(func, value, callback) {
  var res = func(value);
  if (res && typeof res.then === 'function') res.then(callback);else callback(res);
};

var _default = persistence;
exports.default = _default;